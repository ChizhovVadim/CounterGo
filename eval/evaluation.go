package eval

import (
	"math"

	. "github.com/ChizhovVadim/CounterGo/common"
)

const (
	PawnValue = 100
	maxPhase  = 24
	evalScale = 100
)

type EvaluationService struct {
	opening       int
	endgame       int
	phase         int
	whiteFactor   int
	blackFactor   int
	weights       [2 * fSize]int
	features      [fSize]int
	mobilityBonus [1 + 27]int
	pst           pst
}

type pst struct {
	wn, bn, wb, bb, wq, bq, wkOp, bkOp, wkEg, bkEg [64]int
}

func NewEvaluationService() *EvaluationService {
	var srv = &EvaluationService{}
	srv.initPst()
	srv.initMobility()
	srv.initWeights(autoGeneratedWeights)
	return srv
}

func (e *EvaluationService) initPst() {
	var (
		knightLine = [8]int{0, 2, 3, 4, 4, 3, 2, 0}
		bishopLine = [8]int{0, 1, 2, 3, 3, 2, 1, 0}
		kingLine   = [8]int{0, 2, 3, 4, 4, 3, 2, 0}
	)
	for sq := 0; sq < 64; sq++ {
		var f = File(sq)
		var r = Rank(sq)
		e.pst.wn[sq] = knightLine[f] + knightLine[r]
		e.pst.wb[sq] = Min(bishopLine[f], bishopLine[r])
		e.pst.wq[sq] = Min(bishopLine[f], bishopLine[r])
		e.pst.wkOp[sq] = Min(dist[sq][SquareG1], dist[sq][SquareB1])
		e.pst.wkEg[sq] = kingLine[f] + kingLine[r]
	}
	e.pst.initBlack()
}

func (e *EvaluationService) initMobility() {
	for i := range e.mobilityBonus {
		e.mobilityBonus[i] = int(math.Round(20 * math.Sqrt(float64(i))))
	}
}

func (e *EvaluationService) initWeights(weights []int) {
	if len(weights) != len(e.weights) {
		return
	}
	copy(e.weights[:], weights)
}

var pawnPassedBonus = [8]int{0, 0, 0, 2, 6, 12, 21, 0}

const (
	darkSquares  = uint64(0xAA55AA55AA55AA55)
	whiteOutpost = (FileCMask | FileDMask | FileEMask | FileFMask) & (Rank4Mask | Rank5Mask | Rank6Mask)
	blackOutpost = (FileCMask | FileDMask | FileEMask | FileFMask) & (Rank5Mask | Rank4Mask | Rank3Mask)
)

const (
	kingAttackUnitKnight = 3
	kingAttackUnitBishop = 2
	kingAttackUnitRook   = 4
	kingAttackUnitQueen  = 6
)

var (
	dist            [64][64]int
	whitePawnSquare [64]uint64
	blackPawnSquare [64]uint64
	kingZone        [64]uint64
)

func (e *EvaluationService) add(feature, value int) {
	e.opening += value * e.weights[2*feature]
	e.endgame += value * e.weights[2*feature+1]
	e.features[feature] += value
}

func (e *EvaluationService) Evaluate(p *Position) int {
	var score = e.evaluateCore(p)
	if !p.WhiteMove {
		score = -score
	}
	return score * PawnValue / e.weights[2*fPawnMaterial+1]
}

type evalEntry struct {
	phase       int
	whiteFactor int
	blackFactor int
	features    []featureEntry
}

type featureEntry struct{ index, value int }

func (entry *evalEntry) Evaluate(weights []int) int {
	var scoreOp, scoreEg int
	for _, f := range entry.features {
		scoreOp += weights[2*f.index] * f.value
		scoreEg += weights[2*f.index+1] * f.value
	}
	var score = (scoreOp*entry.phase + scoreEg*(maxPhase-entry.phase)) / maxPhase
	if score > 0 {
		score /= entry.whiteFactor
	} else {
		score /= entry.blackFactor
	}
	return score
}

func (e *EvaluationService) computeEntry(p *Position) evalEntry {
	for i := range e.features {
		e.features[i] = 0
	}
	e.evaluateCore(p)
	var result = evalEntry{
		phase:       e.phase,
		whiteFactor: e.whiteFactor,
		blackFactor: e.blackFactor,
	}
	for i, v := range e.features {
		if v != 0 {
			result.features = append(result.features, featureEntry{i, v})
		}
	}
	return result
}

func (e *EvaluationService) evaluateCore(p *Position) int {
	e.opening = 0
	e.endgame = 0

	var (
		x, b                                         uint64
		sq, keySq, bonus                             int
		wn, bn, wb, bb, wr, br, wq, bq               int
		wattackTot, wattackNb, battackTot, battackNb int
		wattackCount, battackCount                   int
		wattacks, battacks                           uint64
	)
	var allPieces = p.White | p.Black
	var wkingSq = FirstOne(p.Kings & p.White)
	var bkingSq = FirstOne(p.Kings & p.Black)
	var wp = PopCount(p.Pawns & p.White)
	var bp = PopCount(p.Pawns & p.Black)

	e.add(fPawnWeak,
		PopCount(getWhiteWeakPawns(p))-
			PopCount(getBlackWeakPawns(p)))

	e.add(fPawnDoubled,
		PopCount(getIsolatedPawns(p.Pawns&p.White)&getDoubledPawns(p.Pawns&p.White))-
			PopCount(getIsolatedPawns(p.Pawns&p.Black)&getDoubledPawns(p.Pawns&p.Black)))

	e.add(fPawnDuo,
		PopCount(p.Pawns&p.White&(Left(p.Pawns&p.White)|Right(p.Pawns&p.White)))-
			PopCount(p.Pawns&p.Black&(Left(p.Pawns&p.Black)|Right(p.Pawns&p.Black))))

	var wpawnAttacks = AllWhitePawnAttacks(p.Pawns & p.White)
	var bpawnAttacks = AllBlackPawnAttacks(p.Pawns & p.Black)

	e.add(fPawnProtected,
		PopCount(p.Pawns&p.White&wpawnAttacks)-
			PopCount(p.Pawns&p.Black&bpawnAttacks))

	e.add(fMinorProtected,
		PopCount((p.Knights|p.Bishops)&p.White&wpawnAttacks)-
			PopCount((p.Knights|p.Bishops)&p.Black&bpawnAttacks))

	var wstrongFields = whiteOutpost &^ DownFill(bpawnAttacks)
	var bstrongFields = blackOutpost &^ UpFill(wpawnAttacks)

	e.add(fKnightOutpost,
		PopCount(p.Knights&p.White&wstrongFields)-
			PopCount(p.Knights&p.Black&bstrongFields))

	var wkingZone = kingZone[wkingSq]
	var bkingZone = kingZone[bkingSq]

	if (wpawnAttacks & bkingZone) != 0 {
		wattackNb++
		wattackTot++
	}
	if (bpawnAttacks & wkingZone) != 0 {
		battackNb++
		battackTot++
	}
	wattackCount += PopCount(wpawnAttacks & bkingZone)
	battackCount += PopCount(bpawnAttacks & wkingZone)

	e.add(fPawnBlockedByOwnPiece,
		PopCount(p.Pawns&p.White&^wkingZone&(Rank2Mask|Rank3Mask)&Down(p.White))-
			PopCount(p.Pawns&p.Black&^bkingZone&(Rank7Mask|Rank6Mask)&Up(p.Black)))

	e.add(fPawnRammed,
		PopCount(p.Pawns&p.White&(Rank2Mask|Rank3Mask)&Down(p.Pawns&p.Black))-
			PopCount(p.Pawns&p.Black&(Rank7Mask|Rank6Mask)&Up(p.Pawns&p.White)))

	wattacks |= wpawnAttacks
	battacks |= bpawnAttacks

	var threatsByWhite = (p.Knights | p.Bishops) & p.Black & wattacks
	var threatsByBlack = (p.Knights | p.Bishops) & p.White & battacks

	var wMobilityArea = ^((p.Pawns & p.White) | bpawnAttacks)
	var bMobilityArea = ^((p.Pawns & p.Black) | wpawnAttacks)

	for x = p.Knights & p.White; x != 0; x &= x - 1 {
		wn++
		sq = FirstOne(x)
		e.add(fKnightPst, e.pst.wn[sq])
		b = KnightAttacks[sq]
		e.add(fKnightMobility, e.mobilityBonus[PopCount(b&wMobilityArea)])
		wattacks |= b
		if (b & bkingZone) != 0 {
			wattackNb++
			wattackTot += kingAttackUnitKnight
			wattackCount += PopCount(b & bkingZone)
		}
	}

	for x = p.Knights & p.Black; x != 0; x &= x - 1 {
		bn++
		sq = FirstOne(x)
		e.add(fKnightPst, e.pst.bn[sq])
		b = KnightAttacks[sq]
		e.add(fKnightMobility, -e.mobilityBonus[PopCount(b&bMobilityArea)])
		battacks |= b
		if (b & wkingZone) != 0 {
			battackNb++
			battackTot += kingAttackUnitKnight
			battackCount += PopCount(b & wkingZone)
		}
	}

	for x = p.Bishops & p.White; x != 0; x &= x - 1 {
		wb++
		sq = FirstOne(x)
		e.add(fBishopPst, e.pst.wb[sq])
		b = BishopAttacks(sq, allPieces)
		e.add(fBishopMobility, e.mobilityBonus[PopCount(b&wMobilityArea)])
		wattacks |= b
		if (b & bkingZone) != 0 {
			wattackNb++
			wattackTot += kingAttackUnitBishop
			wattackCount += PopCount(b & bkingZone)
		}
		e.add(fBishopRammedPawns, PopCount(sameColorSquares(sq)&p.Pawns&p.White&Down(p.Pawns&p.Black)))
	}

	for x = p.Bishops & p.Black; x != 0; x &= x - 1 {
		bb++
		sq = FirstOne(x)
		e.add(fBishopPst, e.pst.bb[sq])
		b = BishopAttacks(sq, allPieces)
		e.add(fBishopMobility, -e.mobilityBonus[PopCount(b&bMobilityArea)])
		battacks |= b
		if (b & wkingZone) != 0 {
			battackNb++
			battackTot += kingAttackUnitBishop
			battackCount += PopCount(b & wkingZone)
		}
		e.add(fBishopRammedPawns, -PopCount(sameColorSquares(sq)&p.Pawns&p.Black&Up(p.Pawns&p.White)))
	}

	threatsByWhite |= p.Rooks & p.Black & wattacks
	threatsByBlack |= p.Rooks & p.White & battacks

	for x = p.Rooks & p.White; x != 0; x &= x - 1 {
		wr++
		sq = FirstOne(x)
		if Rank(sq) == Rank7 &&
			((p.Pawns&p.Black&Rank7Mask) != 0 || Rank(bkingSq) == Rank8) {
			e.add(fRook7th, 1)
		}
		b = RookAttacks(sq, allPieces^(p.Rooks&p.White))
		//b = RookAttacks(sq, allPieces)
		e.add(fRookMobility, e.mobilityBonus[PopCount(b&wMobilityArea)])
		wattacks |= b
		if (b & bkingZone) != 0 {
			wattackNb++
			wattackTot += kingAttackUnitRook
			wattackCount += PopCount(b & bkingZone)
		}
		b = FileMask[File(sq)]
		if (b & p.Pawns & p.White) == 0 {
			if (b & p.Pawns) == 0 {
				e.add(fRookOpen, 1)
			} else {
				e.add(fRookSemiopen, 1)
			}
		}
	}

	for x = p.Rooks & p.Black; x != 0; x &= x - 1 {
		br++
		sq = FirstOne(x)
		if Rank(sq) == Rank2 &&
			((p.Pawns&p.White&Rank2Mask) != 0 || Rank(wkingSq) == Rank1) {
			e.add(fRook7th, -1)
		}
		b = RookAttacks(sq, allPieces^(p.Rooks&p.Black))
		//b = RookAttacks(sq, allPieces)
		e.add(fRookMobility, -e.mobilityBonus[PopCount(b&bMobilityArea)])
		battacks |= b
		if (b & wkingZone) != 0 {
			battackNb++
			battackTot += kingAttackUnitRook
			battackCount += PopCount(b & wkingZone)
		}
		b = FileMask[File(sq)]
		if (b & p.Pawns & p.Black) == 0 {
			if (b & p.Pawns) == 0 {
				e.add(fRookOpen, -1)
			} else {
				e.add(fRookSemiopen, -1)
			}
		}
	}

	threatsByWhite |= p.Queens & p.Black & wattacks
	threatsByBlack |= p.Queens & p.White & battacks

	for x = p.Queens & p.White; x != 0; x &= x - 1 {
		wq++
		sq = FirstOne(x)
		e.add(fQueenPst, e.pst.wq[sq])
		b = QueenAttacks(sq, allPieces)
		e.add(fQueenMobility, e.mobilityBonus[PopCount(b&wMobilityArea)])
		wattacks |= b
		if (b & bkingZone) != 0 {
			wattackNb++
			wattackTot += kingAttackUnitQueen
			wattackCount += PopCount(b & bkingZone)
		}
	}

	for x = p.Queens & p.Black; x != 0; x &= x - 1 {
		bq++
		sq = FirstOne(x)
		e.add(fQueenPst, e.pst.bq[sq])
		b = QueenAttacks(sq, allPieces)
		e.add(fQueenMobility, -e.mobilityBonus[PopCount(b&bMobilityArea)])
		battacks |= b
		if (b & wkingZone) != 0 {
			battackNb++
			battackTot += kingAttackUnitQueen
			battackCount += PopCount(b & wkingZone)
		}
	}

	threatsByWhite |= p.Kings & p.Black & wattacks
	threatsByBlack |= p.Kings & p.White & battacks

	wattacks |= KingAttacks[wkingSq]
	battacks |= KingAttacks[bkingSq]

	e.add(fThreatByMinor, Max(-1, Min(1,
		PopCount(threatsByWhite)-
			PopCount(threatsByBlack))))

	threatsByWhite |= p.Black & wattacks &^ battacks
	threatsByBlack |= p.White & battacks &^ wattacks

	if PopCount(threatsByWhite) >= 2 {
		e.add(fThreatForFewPiece, 1)
	}
	if PopCount(threatsByBlack) >= 2 {
		e.add(fThreatForFewPiece, -1)
	}

	for x = getWhitePassedPawns(p); x != 0; x &= x - 1 {
		sq = FirstOne(x)
		bonus = pawnPassedBonus[Rank(sq)]
		e.add(fPawnPassed, bonus)
		keySq = sq + 8
		e.add(fPawnPassedOppKing, bonus*dist[keySq][bkingSq])
		e.add(fPawnPassedOwnKing, bonus*dist[keySq][wkingSq])
		if (SquareMask[keySq] & p.Black) == 0 {
			e.add(fPawnPassedFree, bonus)
		}
		if (SquareMask[keySq] & battacks) == 0 {
			e.add(fPawnPassedSafeAdvance, bonus)
		}

		/*if bn+bb+br+bq == 0 {
			var f1 = sq
			if !p.WhiteMove {
				f1 -= 8
			}
			if (whitePawnSquare[f1] & p.Kings & p.Black) == 0 {
				pawnScore.endgame += 200 * Rank(f1) / Rank7
			}
		}*/
	}

	for x = getBlackPassedPawns(p); x != 0; x &= x - 1 {
		sq = FirstOne(x)
		bonus = -pawnPassedBonus[Rank(FlipSquare(sq))]
		e.add(fPawnPassed, bonus)
		keySq = sq - 8
		e.add(fPawnPassedOppKing, bonus*dist[keySq][wkingSq])
		e.add(fPawnPassedOwnKing, bonus*dist[keySq][bkingSq])
		if (SquareMask[keySq] & p.White) == 0 {
			e.add(fPawnPassedFree, bonus)
		}
		if (SquareMask[keySq] & wattacks) == 0 {
			e.add(fPawnPassedSafeAdvance, bonus)
		}

		/*if wn+wb+wr+wq == 0 {
			var f1 = sq
			if p.WhiteMove {
				f1 += 8
			}
			if (blackPawnSquare[f1] & p.Kings & p.White) == 0 {
				pawnScore.endgame -= 200 * (Rank8 - Rank(f1)) / Rank7
			}
		}*/
	}

	e.add(fKingCastlingPst, e.pst.wkOp[wkingSq]+e.pst.bkOp[bkingSq])
	e.add(fKingCenterPst, e.pst.wkEg[wkingSq]+e.pst.bkEg[bkingSq])
	e.add(fKingShelter,
		shelterWKingSquare(p, wkingSq)-
			shelterBKingSquare(p, bkingSq))

	/*if wattackNb >= 2 {
		e.add(fKingAttack, wattackCount)
	}
	if battackNb >= 2 {
		e.add(fKingAttack, -battackCount)
	}*/

	e.add(fKingAttack, Max(0, wattackNb-1)-Max(0, battackNb-1))

	if !p.IsCheck() {
		if p.WhiteMove {
			e.add(fSideToMove, 1)
		} else {
			e.add(fSideToMove, -1)
		}
	}

	e.add(fPawnMaterial, wp-bp)
	e.add(fKnightMaterial, wn-bn)
	e.add(fBishopMaterial, wb-bb)
	e.add(fRookMaterial, wr-br)
	e.add(fQueenMaterial, wq-bq)
	if wb >= 2 {
		e.add(fBishopPairMaterial, 1)
	}
	if bb >= 2 {
		e.add(fBishopPairMaterial, -1)
	}

	var phase = wn + bn + wb + bb + 2*(wr+br) + 4*(wq+bq)
	if phase > maxPhase {
		phase = maxPhase
	}
	var result = (e.opening*phase + e.endgame*(maxPhase-phase)) / maxPhase

	e.phase = phase
	e.whiteFactor = 1
	e.blackFactor = 1

	if wp == 0 {
		if wn+wb <= 1 && wr+wq == 0 {
			e.whiteFactor = 16
		} else if wn == 2 && wb+wr+wq == 0 && bp == 0 {
			e.whiteFactor = 16
		} else if (wn+wb+2*wr+4*wq)-(bn+bb+2*br+4*bq) <= 1 {
			e.whiteFactor = 4
		}
	} else if wp == 1 {
		var fw = wn + wb + 2*wr + 4*wq
		var fb = bn + bb + 2*br + 4*bq
		if fw <= 1 && bn+bb != 0 {
			e.whiteFactor = 8
		} else if fw == fb && bn+bb != 0 {
			e.whiteFactor = 2
		}
	}

	if bp == 0 {
		if bn+bb <= 1 && br+bq == 0 {
			e.blackFactor = 16
		} else if bn == 2 && bb+br+bq == 0 && wp == 0 {
			e.blackFactor = 16
		} else if (bn+bb+2*br+4*bq)-(wn+wb+2*wr+4*wq) <= 1 {
			e.blackFactor = 4
		}
	} else if bp == 1 {
		var fw = wn + wb + 2*wr + 4*wq
		var fb = bn + bb + 2*br + 4*bq
		if fb <= 1 && wn+wb != 0 {
			e.blackFactor = 8
		} else if fw == fb && wn+wb != 0 {
			e.blackFactor = 2
		}
	}

	if (p.Knights|p.Rooks|p.Queens) == 0 &&
		wb == 1 && bb == 1 && AbsDelta(wp, bp) <= 2 &&
		(p.Bishops&darkSquares) != 0 &&
		(p.Bishops & ^darkSquares) != 0 {
		e.whiteFactor = Max(e.whiteFactor, 2)
		e.blackFactor = Max(e.blackFactor, 2)
	}

	if result > 0 {
		result /= e.whiteFactor
	} else {
		result /= e.blackFactor
	}

	return result
}

func getDoubledPawns(pawns uint64) uint64 {
	return DownFill(Down(pawns)) & pawns
}

func getIsolatedPawns(pawns uint64) uint64 {
	return ^FileFill(Left(pawns)|Right(pawns)) & pawns
}

func getWhitePassedPawns(p *Position) uint64 {
	return p.Pawns & p.White &^
		DownFill(Down(Left(p.Pawns&p.Black)|p.Pawns|Right(p.Pawns&p.Black)))
}

func getBlackPassedPawns(p *Position) uint64 {
	return p.Pawns & p.Black &^
		UpFill(Up(Left(p.Pawns&p.White)|p.Pawns|Right(p.Pawns&p.White)))
}

func getWhiteWeakPawns(p *Position) uint64 {
	var pawns = p.Pawns & p.White
	var supported = UpFill(Left(pawns) | Right(pawns))
	var weak = uint64(0)
	weak |= getIsolatedPawns(pawns)
	weak |= (Rank2Mask | Rank3Mask | Rank4Mask) & Down(AllBlackPawnAttacks(p.Pawns&p.Black)) &^ supported
	return pawns & weak

}

func getBlackWeakPawns(p *Position) uint64 {
	var pawns = p.Pawns & p.Black
	var supported = DownFill(Left(pawns) | Right(pawns))
	var weak = uint64(0)
	weak |= getIsolatedPawns(pawns)
	weak |= (Rank7Mask | Rank6Mask | Rank5Mask) & Up(AllWhitePawnAttacks(p.Pawns&p.White)) &^ supported
	return pawns & weak
}

func shelterWKingSquare(p *Position, square int) int {
	var file = File(square)
	if file <= FileC {
		file = FileB
	} else if file >= FileF {
		file = FileG
	}
	var penalty = 0
	for i := 0; i < 3; i++ {
		var mask = FileMask[file+i-1] & p.White & p.Pawns
		if (mask & Rank2Mask) == 0 {
			penalty++
			if (mask & Rank3Mask) == 0 {
				penalty++
				if mask == 0 {
					penalty++
				}
			}
		}
	}
	if penalty == 1 {
		penalty = 0
	}
	return penalty
}

func shelterBKingSquare(p *Position, square int) int {
	var file = File(square)
	if file <= FileC {
		file = FileB
	} else if file >= FileF {
		file = FileG
	}
	var penalty = 0
	for i := 0; i < 3; i++ {
		var mask = FileMask[file+i-1] & p.Black & p.Pawns
		if (mask & Rank7Mask) == 0 {
			penalty++
			if (mask & Rank6Mask) == 0 {
				penalty++
				if mask == 0 {
					penalty++
				}
			}
		}
	}
	if penalty == 1 {
		penalty = 0
	}
	return penalty
}

func (pst *pst) initBlack() {
	for sq := 0; sq < 64; sq++ {
		var flipSq = FlipSquare(sq)
		pst.bn[sq] = -pst.wn[flipSq]
		pst.bb[sq] = -pst.wb[flipSq]
		pst.bq[sq] = -pst.wq[flipSq]
		pst.bkOp[sq] = -pst.wkOp[flipSq]
		pst.bkEg[sq] = -pst.wkEg[flipSq]
	}
}

func sameColorSquares(sq int) uint64 {
	if IsDarkSquare(sq) {
		return darkSquares
	}
	return ^darkSquares
}

func init() {
	for i := 0; i < 64; i++ {
		for j := 0; j < 64; j++ {
			dist[i][j] = SquareDistance(i, j)
		}
	}
	for sq := 0; sq < 64; sq++ {
		var x = UpFill(SquareMask[sq])
		for j := 0; j < Rank(FlipSquare(sq)); j++ {
			x |= Left(x) | Right(x)
		}
		whitePawnSquare[sq] = x
	}
	for sq := 0; sq < 64; sq++ {
		var x = DownFill(SquareMask[sq])
		for j := 0; j < Rank(sq); j++ {
			x |= Left(x) | Right(x)
		}
		blackPawnSquare[sq] = x
	}
	for sq := range kingZone {
		kingZone[sq] = SquareMask[sq] | KingAttacks[sq]
	}
}
