package eval

import (
	. "github.com/ChizhovVadim/CounterGo/common"
)

type Weights struct {
	PawnMaterial          Score
	KnightMaterial        Score
	BishopMaterial        Score
	RookMaterial          Score
	QueenMaterial         Score
	BishopPairMaterial    Score
	PawnMobility          Score
	PawnIsolated          Score
	PawnDoubled           Score
	PawnConnected         [64]Score `json:"-"`
	PawnPassed            Score
	PawnPassedCanMove     Score
	PawnPassedSafeMove    Score
	PawnPassedKingDist    Score
	PawnPassedSquare      Score
	ThreatPawn            Score
	ThreatForPawn         Score
	ThreatPiece           Score
	ThreatPieceForQueen   Score
	RookOpen              Score
	RookSemiopen          Score
	KingShelter           Score
	KingQueenTropism      Score
	KingSafetyAttackers   int
	KingSafetyWeakSquares int
	KingSafetyQueenCheck  int
	KingSafetyRookCheck   int
	KingSafetyBishopCheck int
	KingSafetyKnightCheck int
	BishopRammedPawns     Score
	MinorProtected        Score
	KnightOutpost         Score
	Tempo                 Score
	KnightMobility        [9]Score
	BishopMobility        [14]Score
	RookMobility          [15]Score
	QueenMobility         [28]Score
	PST                   [2][8][64]Score `json:"-"`
}

func (w *Weights) init() {
	// Error: 0.054009
	var autoGeneratedWeights = []int{83, 378, 331, 386, 360, 546, 642, 1253, 1221, 54, 51, 4, 1, 2, -9, 1, 3, 4, 1, -12, -8, 2, -5, -3, 1, -6, 0, -14, -14, -6, -14, -7, -14, -11, -8, -17, -3, -17, -4, 3, -18, 9, -21, -6, 4, 5, -4, 11, -13, 13, -19, 17, 36, 14, 41, 55, 23, 57, 18, 57, 100, 82, 100, 94, 82, 157, 84, 2, -3, 2, 2, -3, -5, 0, 1, 3, 0, 18, 6, 21, 13, 24, 25, 4, 0, 8, 8, 13, 13, 14, 19, 13, 22, 14, 4, -6, 13, -93, 5, 5, 24, 29, 16, 19, 25, 12, 30, 12, 15, 21, 13, 22, 19, 4, 22, 1, 22, 27, 13, -30, 27, -15, 13, -7, 16, -9, 21, 9, 13, 16, 11, 5, 9, -14, 15, -8, 13, -12, 22, -2, 21, -7, 18, 19, 17, 9, 29, 10, 22, 5, 17, 4, 14, 6, 17, 31, 0, 19, 3, 2, 25, -21, 51, -38, 54, -7, 28, -54, 52, 3, 36, 0, -18, 10, -1, -43, 21, -3, 14, 2, -36, -28, -1, -12, 11, -24, 18, 6, 24, 110, 10, 45, 15, 11, -16, 14, 10, 11, 10, 9, 12, 8, 23, 61, 10, -3, 22, 25, 19, 52, -4, 1, -4, 9, 1, 3, 6, 13, 11, 1, -3, 1, -6, 9, 5, 8, 8, 12, 17, 16, 54, 125, 45, -3, -4, 8, 6, -15, -7, -1, -4, 43, -1, 8, 5, 12, -8, -7, -6, -15, 8, 22, 33, -2, 64, 37, 81, 144, 96, 120, 19, 20, 70, 77, 26}
	w.Apply(autoGeneratedWeights)
}

func (w *Weights) Apply(weights []int) []int {
	var wh = &weightHolder{weights: weights, index: 0}

	w.PawnMaterial = Score{wh.withDefault(100).next(), 100}
	w.KnightMaterial = Score{wh.withDefault(325).next(), wh.withDefault(325).next()}
	w.BishopMaterial = Score{wh.withDefault(325).next(), wh.withDefault(325).next()}
	w.RookMaterial = Score{wh.withDefault(500).next(), wh.withDefault(500).next()}
	w.QueenMaterial = Score{wh.withDefault(1000).next(), wh.withDefault(1000).next()}
	w.BishopPairMaterial = Score{wh.withDefault(50).next(), wh.withDefault(50).next()}

	initPst32(w.PST[SideWhite][Pawn][:], wh)
	initPst12(w.PST[SideWhite][Knight][:], wh)
	initPst12(w.PST[SideWhite][Bishop][:], wh)
	initPst12(w.PST[SideWhite][Rook][:], wh)
	initPst12(w.PST[SideWhite][Queen][:], wh)
	initPst12(w.PST[SideWhite][King][:], wh)
	initPstBlack(w)

	initGeomProgr(w.KnightMobility[:], wh.nextScore())
	initGeomProgr(w.BishopMobility[:], wh.nextScore())
	initGeomProgr(w.RookMobility[:], wh.nextScore())
	initGeomProgr(w.QueenMobility[:], wh.nextScore())

	w.ThreatPawn = wh.nextScore()
	w.ThreatForPawn = wh.nextScore()
	w.ThreatPiece = wh.nextScore()
	w.ThreatPieceForQueen = wh.nextScore()

	initPst12(w.PawnConnected[:], wh)
	w.PawnMobility = wh.nextScore()
	w.PawnIsolated = wh.nextScore()
	w.PawnDoubled = wh.nextScore()
	w.RookOpen = wh.nextScore()
	w.RookSemiopen = wh.nextScore()
	w.KingShelter = Score{wh.next(), 0}

	w.KingQueenTropism = wh.nextScore()
	w.BishopRammedPawns = wh.nextScore()
	w.MinorProtected = wh.nextScore()
	w.KnightOutpost = wh.nextScore()

	w.KingSafetyAttackers = wh.next()
	w.KingSafetyWeakSquares = wh.next()
	w.KingSafetyQueenCheck = wh.next()
	w.KingSafetyRookCheck = wh.next()
	w.KingSafetyBishopCheck = wh.next()
	w.KingSafetyKnightCheck = wh.next()

	w.PawnPassed = wh.nextScore()
	w.PawnPassedCanMove = Score{0, wh.next()}
	w.PawnPassedSafeMove = Score{0, wh.next()}
	w.PawnPassedKingDist = Score{0, wh.next()}
	w.PawnPassedSquare = Score{0, 200}

	w.Tempo = Score{8, 8}

	return wh.weights
}

func centerScores(source []Score) {
	var s Score
	for _, x := range source {
		s.add(x)
	}
	var center = Score{s.Mg / len(source), s.Eg / len(source)}
	for i := range source {
		source[i].sub(center)
	}
}

func initGeomProgr(source []Score, weight Score) {
	const b1 = 1.0
	const q = 0.9

	var bi = b1
	var sum = 0.0

	for i := range source {
		if i > 0 {
			sum += bi
			bi *= q
		}
		source[i] = makeScore(sum*float64(weight.Mg), sum*float64(weight.Eg))
	}

	centerScores(source)
}

func initPst32(pst []Score, wh *weightHolder) {
	var center [32]Score
	wh.initScores(center[:])
	for sq := 0; sq < 64; sq++ {
		pst[sq] = center[toSq32(sq)]
	}
}

func initPst12(pst []Score, wh *weightHolder) {
	var fileCenter [4]Score
	var rankCenter [8]Score
	wh.initScores(fileCenter[:])
	wh.initScores(rankCenter[:])
	for sq := 0; sq < 64; sq++ {
		pst[sq] = fileCenter[file4(sq)]
		pst[sq].add(rankCenter[Rank(sq)])
	}
}

func initPstBlack(w *Weights) {
	for pieceType := Pawn; pieceType <= King; pieceType++ {
		for sq := 0; sq < 64; sq++ {
			w.PST[SideBlack][pieceType][sq] = negScore(w.PST[SideWhite][pieceType][FlipSquare(sq)])
		}
	}
}

func file4(sq int) int {
	var f = File(sq)
	if f >= FileE {
		f = FileH - f
	}
	return f
}

func toSq32(sq int) int {
	return 4*Rank(sq) + file4(sq)
}
